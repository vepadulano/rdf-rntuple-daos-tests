From e03f76cc1495fc6ad2118f1b5f1c62e07c68d78d Mon Sep 17 00:00:00 2001
From: Javier Lopez-Gomez <javier.lopez.gomez@cern.ch>
Date: Thu, 4 Nov 2021 12:26:38 -0500
Subject: [PATCH 2/3] [ntuple,daos] Testing: reuse a (per-container) event
 queue

---
 tree/ntuple/v7/inc/ROOT/RDaos.hxx | 34 ++++++++++++++++---------------
 tree/ntuple/v7/src/RDaos.cxx      | 16 +++++++--------
 2 files changed, 25 insertions(+), 25 deletions(-)

diff --git a/tree/ntuple/v7/inc/ROOT/RDaos.hxx b/tree/ntuple/v7/inc/ROOT/RDaos.hxx
index a801d16b89..70e0c03941 100644
--- a/tree/ntuple/v7/inc/ROOT/RDaos.hxx
+++ b/tree/ntuple/v7/inc/ROOT/RDaos.hxx
@@ -141,19 +141,19 @@ public:
 private:
    struct DaosEventQueue {
       std::size_t fSize;
-      std::unique_ptr<daos_event_t[]> fEvs;
       daos_handle_t fQueue;
-      DaosEventQueue(std::size_t size);
+      DaosEventQueue(/*std::size_t size*/);
       ~DaosEventQueue();
       /**
-        \brief Wait for all events in this event queue to complete.
+        \brief Wait for `n` events in this event queue to complete.
         \return Number of events still in the queue. This should be 0 on success.
        */
-      int Poll();
+      int Poll(std::size_t n);
    };
 
    daos_handle_t fContainerHandle{};
    uuid_t fContainerUuid{};
+   std::unique_ptr<DaosEventQueue> fEventQueue;
    std::shared_ptr<RDaosPool> fPool;
    ObjClassId_t fDefaultObjectClass{OC_SX};
 
@@ -167,19 +167,21 @@ private:
    template <typename Fn>
    int VectorReadWrite(std::vector<RWOperation> &vec, ObjClassId_t cid, Fn fn) {
       int ret;
-      DaosEventQueue eventQueue(vec.size());
-      {
-         std::vector<std::tuple<std::unique_ptr<RDaosObject>, RDaosObject::FetchUpdateArgs>> requests{};
-         requests.reserve(vec.size());
-         for (size_t i = 0; i < vec.size(); ++i) {
-           requests.push_back(std::make_tuple(std::unique_ptr<RDaosObject>(new RDaosObject(*this, vec[i].fOid, cid.fCid)),
-                                               RDaosObject::FetchUpdateArgs{
-                                                 vec[i].fDistributionKey, vec[i].fAttributeKey,
-                                                 vec[i].fIovs, &eventQueue.fEvs[i]}));
-            fn(std::get<0>(requests.back()).get(), std::get<1>(requests.back()));
-         }
-         ret = eventQueue.Poll();
+      std::vector<std::tuple<std::unique_ptr<RDaosObject>, RDaosObject::FetchUpdateArgs>> requests{};
+      auto evp = std::unique_ptr<daos_event_t[]>(new daos_event_t[vec.size()]);
+
+      requests.reserve(vec.size());
+      for (size_t i = 0; i < vec.size(); ++i) {
+         // FIXME: reuse the EQ properly; this is here for testing purposes only
+         daos_event_init(&evp[i], fEventQueue->fQueue, nullptr);
+
+         requests.push_back(std::make_tuple(std::unique_ptr<RDaosObject>(new RDaosObject(*this, vec[i].fOid, cid.fCid)),
+                                            RDaosObject::FetchUpdateArgs{
+                                              vec[i].fDistributionKey, vec[i].fAttributeKey,
+                                              vec[i].fIovs, &evp[i]}));
+         fn(std::get<0>(requests.back()).get(), std::get<1>(requests.back()));
       }
+      ret = fEventQueue->Poll(vec.size());
       return ret;
    }
 
diff --git a/tree/ntuple/v7/src/RDaos.cxx b/tree/ntuple/v7/src/RDaos.cxx
index 329ad11579..7330dfae09 100644
--- a/tree/ntuple/v7/src/RDaos.cxx
+++ b/tree/ntuple/v7/src/RDaos.cxx
@@ -113,27 +113,24 @@ int ROOT::Experimental::Detail::RDaosObject::Update(FetchUpdateArgs &args)
 ////////////////////////////////////////////////////////////////////////////////
 
 
-ROOT::Experimental::Detail::RDaosContainer::DaosEventQueue::DaosEventQueue(std::size_t size)
-  : fSize(size), fEvs(std::unique_ptr<daos_event_t[]>(new daos_event_t[size]))
+ROOT::Experimental::Detail::RDaosContainer::DaosEventQueue::DaosEventQueue(/*std::size_t size*/)
+  //: fSize(size), fEvs(std::unique_ptr<daos_event_t[]>(new daos_event_t[size]))
 {
    daos_eq_create(&fQueue);
-   for (std::size_t i = 0; i < fSize; ++i)
-      daos_event_init(&fEvs[i], fQueue, nullptr);
 }
 
 ROOT::Experimental::Detail::RDaosContainer::DaosEventQueue::~DaosEventQueue() {
-   for (std::size_t i = 0; i < fSize; ++i)
-      daos_event_fini(&fEvs[i]);
    daos_eq_destroy(fQueue, 0);
 }
 
-int ROOT::Experimental::Detail::RDaosContainer::DaosEventQueue::Poll() {
-   auto evp = std::unique_ptr<daos_event_t*[]>(new daos_event_t*[fSize]);
-   std::size_t n = fSize;
+int ROOT::Experimental::Detail::RDaosContainer::DaosEventQueue::Poll(std::size_t n) {
+   auto evp = std::unique_ptr<daos_event_t*[]>(new daos_event_t*[n]);
    while (n) {
       int c;
       if ((c = daos_eq_poll(fQueue, 0, DAOS_EQ_WAIT, n, evp.get())) < 0)
          break;
+      for (std::size_t i = 0; i < c; ++i)
+         daos_event_fini(evp[i]);
       n -= c;
    }
    return n;
@@ -157,6 +154,7 @@ ROOT::Experimental::Detail::RDaosContainer::RDaosContainer(std::shared_ptr<RDaos
    if (int err = daos_cont_open(fPool->fPoolHandle, fContainerUuid, DAOS_COO_RW,
          &fContainerHandle, &containerInfo, nullptr))
       throw RException(R__FAIL("daos_cont_open: error: " + std::string(d_errstr(err))));
+   fEventQueue = std::make_unique<DaosEventQueue>();
 }
 
 ROOT::Experimental::Detail::RDaosContainer::~RDaosContainer() {
-- 
2.27.0

